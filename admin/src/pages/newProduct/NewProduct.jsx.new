import React, { useState } from 'react'
import "./newProduct.css"
import {
    getStorage,
    ref,
    uploadBytesResumable,
    getDownloadURL,
} from "firebase/storage";
import app from '../../firebase';
import { addProduct } from '../../redux/apiCalls';
import { useDispatch } from 'react-redux';
import { useHistory } from 'react-router-dom';

export default function NewProduct() {
    const [inputs, setInputs] = useState({});
    const [file, setFile] = useState(null);
    const [cat, setCat] = useState([]);
    const [message, setMessage] = useState(null);
    const [uploading, setUploading] = useState(false);
    const dispatch = useDispatch();
    const history = useHistory();

    const handleChange = (e) => {
        setInputs(prev => {
            return { ...prev, [e.target.name]: e.target.value }
        })
    }

    const handleCat = (e) => {
        setCat(e.target.value.split(","));
    };

    const handleClick = async (e) => {
        e.preventDefault();
        
        if (!file) {
            setMessage({ type: "error", text: "Please select an image file" });
            return;
        }

        if (!inputs.title || !inputs.desc || !inputs.price) {
            setMessage({ type: "error", text: "Please fill in all required fields" });
            return;
        }

        setUploading(true);
        try {
            const fileName = new Date().getTime() + file.name;
            const storage = getStorage(app);
            const storageRef = ref(storage, fileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            uploadTask.on(
                "state_changed",
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    setMessage({ type: "info", text: `Uploading: ${Math.round(progress)}%` });
                },
                (error) => {
                    setMessage({ type: "error", text: "Error uploading image: " + error.message });
                    setUploading(false);
                },
                async () => {
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        const product = { 
                            ...inputs, 
                            img: downloadURL, 
                            categories: cat,
                            price: Number(inputs.price)
                        };
                        
                        await addProduct(product, dispatch);
                        setMessage({ type: "success", text: "Product added successfully!" });
                        setTimeout(() => {
                            history.push("/products");
                        }, 2000);
                    } catch (err) {
                        setMessage({ 
                            type: "error", 
                            text: err.response?.data?.message || "Error adding product" 
                        });
                    }
                    setUploading(false);
                }
            );
        } catch (error) {
            setMessage({ type: "error", text: "Error uploading product: " + error.message });
            setUploading(false);
        }
    };

    return (
        <div className="newProduct">
            <h1 className="addProductTitle">New Product</h1>
            {message && (
                <div
                    style={{
                        margin: "10px 0",
                        padding: "10px",
                        backgroundColor: 
                            message.type === "success" ? "#d4edda" : 
                            message.type === "error" ? "#f8d7da" :
                            "#cce5ff",
                        color: 
                            message.type === "success" ? "#155724" : 
                            message.type === "error" ? "#721c24" :
                            "#004085",
                        borderRadius: "4px",
                        textAlign: "center"
                    }}
                >
                    {message.text}
                </div>
            )}
            <form className="addProductForm">
                <div className="addProductItem">
                    <label>Image</label>
                    <input
                        type="file"
                        id="file"
                        onChange={(e) => setFile(e.target.files[0])}
                        disabled={uploading}
                    />
                </div>
                <div className="addProductItem">
                    <label>Title</label>
                    <input
                        name="title"
                        type="text"
                        placeholder="Product Title"
                        onChange={handleChange}
                        disabled={uploading}
                        required
                    />
                </div>
                <div className="addProductItem">
                    <label>Description</label>
                    <input
                        name="desc"
                        type="text"
                        placeholder="Product Description"
                        onChange={handleChange}
                        disabled={uploading}
                        required
                    />
                </div>
                <div className="addProductItem">
                    <label>Price</label>
                    <input
                        name="price"
                        type="number"
                        placeholder="100"
                        onChange={handleChange}
                        disabled={uploading}
                        required
                    />
                </div>
                <div className="addProductItem">
                    <label>Categories</label>
                    <input
                        type="text"
                        placeholder="jeans,skirts,etc (comma separated)"
                        onChange={handleCat}
                        disabled={uploading}
                    />
                </div>
                <div className="addProductItem">
                    <label>Stock</label>
                    <select name="inStock" onChange={handleChange} disabled={uploading}>
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </select>
                </div>
                <button 
                    onClick={handleClick} 
                    className="addProductButton"
                    disabled={uploading}
                    style={{
                        opacity: uploading ? 0.7 : 1,
                        cursor: uploading ? 'not-allowed' : 'pointer'
                    }}
                >
                    {uploading ? "Adding Product..." : "Create"}
                </button>
            </form>
        </div>
    );
}
